--
-- PostgreSQL database dump
--

-- Dumped from database version 9.2.8
-- Dumped by pg_dump version 9.2.8
-- Started on 2014-08-14 10:53:50

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 172 (class 3079 OID 11727)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 1941 (class 0 OID 0)
-- Dependencies: 172
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 170 (class 1259 OID 16403)
-- Name: albums; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE albums (
    title text,
    artist text,
    id bigint NOT NULL,
    albums text
);


ALTER TABLE public.albums OWNER TO postgres;

--
-- TOC entry 171 (class 1259 OID 16409)
-- Name: albums_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE albums_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.albums_id_seq OWNER TO postgres;

--
-- TOC entry 1942 (class 0 OID 0)
-- Dependencies: 171
-- Name: albums_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE albums_id_seq OWNED BY albums.id;


--
-- TOC entry 168 (class 1259 OID 16386)
-- Name: news; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE news (
    time_cd timestamp without time zone,
    time_ed timestamp without time zone,
    head text,
    anons text,
    txt text,
    val bigint,
    id bigint NOT NULL
);


ALTER TABLE public.news OWNER TO postgres;

--
-- TOC entry 169 (class 1259 OID 16392)
-- Name: news_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE news_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.news_id_seq OWNER TO postgres;

--
-- TOC entry 1943 (class 0 OID 0)
-- Dependencies: 169
-- Name: news_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE news_id_seq OWNED BY news.id;


--
-- TOC entry 1819 (class 2604 OID 16411)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY albums ALTER COLUMN id SET DEFAULT nextval('albums_id_seq'::regclass);


--
-- TOC entry 1818 (class 2604 OID 16394)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY news ALTER COLUMN id SET DEFAULT nextval('news_id_seq'::regclass);


--
-- TOC entry 1932 (class 0 OID 16403)
-- Dependencies: 170
-- Data for Name: albums; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY albums (title, artist, id, albums) FROM stdin;
LaLa	Gaga	1	\N
LoLo	Gaga	2	\N
HaHa	KuKu	3	\N
\.


--
-- TOC entry 1944 (class 0 OID 0)
-- Dependencies: 171
-- Name: albums_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('albums_id_seq', 3, true);


--
-- TOC entry 1930 (class 0 OID 16386)
-- Dependencies: 168
-- Data for Name: news; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY news (time_cd, time_ed, head, anons, txt, val, id) FROM stdin;
2014-08-12 09:52:16	\N	123	123	123	1	119
2014-08-05 11:20:48	2014-08-05 14:08:50	PHP  парсер	Удобный  парсер	https://phpconsole.stephensearles.com	1	117
2014-08-05 11:21:54	2014-08-05 14:30:25	Что не нужно кодить самостоятельно?	Мы,  программисты, любим решать задачи. Мы любим, когда идеи возникают в наших головах, перенаправляются на наши пальцы и тем самым создаются великолепные       решения  . \r\nhttp://habrahabr.ru/post/230737/	Недавно написал свой велосипед и выложил его на хабре. Вот он: «Простейший Connection pool без DataSource в Java». Статья не из самых удачных, только прошу больше не минусовать. Итак, чтобы не повторять такие ошибки самому и, возможно, предостеречь кого-то от таких ошибок,  решил перевести статью «Seven Things You Should Never Code Yourself» достаточно известного в среде open-source деятеля IT-области — Andy Lester'а. Итак, кому интересно, прошу под кат.\r\n\r\n         \r\n   \r\nМы, программисты, любим решать задачи. Мы любим, когда идеи возникают в наших головах, перенаправляются на наши пальцы и тем самым создаются великолепные решения.\r\n\r\nНо порой мы слишком быстро вскакиваем и начинаем проворачивать свой код без учета всех последствий, к которым это может привести. Мы не учитываем, что кто-то, возможно, уже решил эту проблему, и что уже есть код, доступный для использования, который был написан, протестирован и продебажен кем-то другим. Иногда нам просто необходимо остановиться и подумать, прежде чем начать что-то печатать.\r\n   \r\nНапример, если вы столкнетесь с одной из этих семи задач программирования, то почти всегда вам лучше поискать существующее решение, чем пытаться реализовывать что-то самостоятельно:\r\n\r\n1. Парсинг HTML или XML\r\n\r\nЗадачей, сложностью которой зачастую пренебрегают, по крайней мере на основе того, сколько раз про него спросили на StackOverflow — является парсинг HTML или XML. Извлечение данных из произвольного HTML выглядит обманчиво просто, но на самом деле эта задача должна решаться применением библиотек. Скажем, вы хотите извлечь URL из тега такого, как\r\n\r\n\r\n\r\nНа самом деле это простое регулярное выражение, которое соответствует шаблону.\r\n\r\n//\r\n\r\nСтрока “” будет выдана в результатах поиска по шаблону и она может быть присвоена строковой переменной. Но будет ли такой код находить нужные значения в тегах, в которых имеются другие атрибуты:\r\n\r\n\r\n\r\nПосле изменения кода, чтобы он обрабатывал такие случаи, будет ли он рабочим, если кавычки имеют другой вид:\r\n\r\n\r\n\r\nили кавычек не будет вовсе:\r\n\r\n\r\n\r\nЧто делать, если тег занимает несколько строк и является самозакрывающимся:\r\n\r\n\r\n\r\nИ будет ли ваш код знать, игнорировать ли закомментированные теги:\r\n\r\n\r\n\r\nК тому времени, как вы сделаете еще один цикл в поисках случаев, с которыми ваш код не может иметь дело, при этом исправляя и тестируя свой код, вы бы могли уже использовать нужную библиотеку и решили бы все свои проблемы.\r\n\r\nЯ вам привел наглядную историю с примерами: вы потратите намного меньше времени на поиски существующей библиотеки и на ее изучение, нежели на попытки написать свой велосипед, который затем придется расширять, чтобы он работал в тех случаях, о которых вы и не думали, когда начинали его писать.\r\n\r\n2. Парсинг CSV и JSON\r\n\r\nCSV файлы обманчиво просты, но таят в себе некую опасность. Файлы с величинами, разделенными запятыми тривиальны для парсинга, не так ли?\r\n\r\n# ID, name, city\r\n1, Queen Elizabeth II, London\r\n\r\nБезусловно, пока вам не придется иметь дело с запятыми, заключенными в двойные кавычки:\r\n\r\n2, J. R. Ewing, "Dallas, Texas"\r\n\r\nЕсли вы решили проблему с использованием таких двойных кавычек, что будет, если в строке будут встроенные кавычки, которые нужно пропустить:\r\n\r\n3, "Larry \\"Bud\\" Melman", "New York, New York"\r\n\r\nВы можете справиться и с этим, пока не придется иметь дело с переводами строк в середине записи.\r\n\r\nJSON имеет те же самые опасности, связанные с типами данных, что и CSV, с дополнительной проблемой, возникающей из-за возможности хранить многоуровневые структуры данных.\r\n\r\nУберегите себя от хлопот и неточностей. Любые данные, которые не могут быть обработаны разделением строки по запятым должны быть обработаны библиотекой.\r\n\r\nЕсли чтение структурированных данных неструктурированным методом считается плохой практикой, то идея изменять данные на месте еще хуже. Люди часто говорят что-то вроде «Я хочу изменить все теги с такими-то и такими URL так, чтобы у них появивлся новый атрибут.» Но даже такое, казалось бы, простое дело, как «Я хочу изменить в каждом пятом поле в этом CSV имя Боб на Стив» таит в себе опасность, потому что, как было отмечено выше, вы не сможете считывать запятые должным образом. Чтобы все было правильно, вам необходимо прочитать данные с помощью грамотной библиотеки во внутреннюю структуру, изменить данные, а затем записать измененные данные обратно с помощью той же библиотеки. Ничто не представляет такой риск искажения данных, как если их структура не соответствует вашим ожиданиям.\r\n\r\n3. Проверка Email адресов\r\n\r\nЕсть два способа проверки адреса электронной почты. Можно проверить по-простому, сказав, «мне нужно иметь некоторые символы перед знаком @, а затем какие-то символы после него», эту идею реализует регулярное выражение:\r\n\r\n/.+@.+/\r\n\r\n\r\n\r\nОно, конечно же, не полное, и допускает наличие неверных элементов, но по крайней мере мы имеем знак @ посередине.\r\n\r\nИли вы можете проверить на соответствие правилам RFC 822. Эти правила покрывают все случаи, которые встречаются редко, но все же допустимы. Простое регулярное выражение не выдает такой срез. Вам придется использовать библиотеку, написанную кем-то другим.\r\n\r\nЕсли вы не собираетесь проверять на соответствие RFC 822, то все, что вы делаете будет использованием правил, которые могут казаться разумными, но могут оказаться и не правильными. Этот подход является компромиссным, но не обманывайте себя, думая что вы охватили все случаи, если в итоге вы не обратились к RFC, или просто используйте библиотеку, написанную кем-то другим.\r\n\r\n(Для дальнейшего обсуждения вопроса валидации электронных адресов, см. Stackoverflow)\r\n\r\n4. Работа с URL\r\n\r\nURL-адреса не столь противны, как адреса электронной почты, но они по-прежнему полны раздражающих мелких правил, которые вы должны помнить. Какие символы должны быть закодированы? Как вы обрабатываете пробелы? Как насчет знаков +? Какие символы могут идти вслед за знаком #?\r\n\r\nВне зависимости от языка, который вы используете, существует код для разбиения URL на компоненты и для сборки URL из должным образом оформленных компонент.\r\n\r\n5. Работа с датой/временем\r\n\r\nМанипуляции с датой/временем являются основной из проблем, в которых вы скорее всего не сможете охватить все аспекты самостоятельно. При обработке даты/времени должны учитываться часовые пояса, летнее время, високосные годы, и даже високосные секунды. В Соединенных Штатах есть только четыре часовых пояса, и они отличаются друг от друга на час. В остальном мире не все так просто.\r\n\r\nБудь то для арифметики c датами, сводящейся к вычислению даты, которая настанет по прошествии трех дней от определенной даты, или для валидации строки на входе на соответствие формату даты, используйте существующие библиотеки.\r\n\r\n6. Системы шаблонов\r\n\r\nЭто почти обряд посвящения. Младший программист должен создать огромное количество шаблонного текста и придумывает какой-нибудь простенький формат наподобие:\r\n\r\nDear #user#,\r\nThank you for your interest in #product#...\r\n\r\nЭтот формат работает некоторое время, но затем все завершается тем, что возникает необходимость добавления форматов на выходе, численное форматирование, вывод структурированных данных в таблицу, и т.д. пока не возникнет некий монстр, требующий бесконечного ухода и кормления.\r\n\r\nЕсли вы делаете что-нибудь посложное, чем просто замещение строки строкой, сделайте шаг назад и найдите хорошую библиотеку шаблонов. Дела обстоят еще проще, если вы пишете на PHP, сам язык в данном случае является системой шаблонов (хотя в наши дни об этом зачастую забывают).\r\n\r\n7. Фреймворки для логирования\r\n\r\nИнструменты логирования являются еще одним примером проектов, которые начинаются с малого и вырастают в монстров. От небольшой функции, предназначенной для логирования в файл, в скором времени может потребоваться логирование в несколько файлов, или отправка электронного письма по завершении процесса, или чтобы она поддерживала уровни логирования и т.д. Вне зависимости от языка, который вы используете, существует по крайней мере три готовых пакета для логирования, используемые годами и которые уберегут вас от описанных выше проблем.\r\n\r\nНе является ли библиотека излишеством?\r\n\r\nПеред тем, как относиться с пренебрежением или презрением к идее подключения стороннего модуля, следует обратить пристальное внимание на ваши протесты и возражения. Первое возражение обычно такое: «Зачем мне нужна целая библиотека просто для того чтобы сделать это (проверить эту дату/распарсить этот HTML/и т.д..),» Мой ответ: «А что в этом плохого?» Вы же, скорее всего, не пишете код микроконтроллера для тостера, где вы должны выжать каждый байт пространства для кода.\r\n\r\nЕсли у вас есть скоростные ограничения, то учтите, что избежание использования библиотеки может оказаться преждевременной оптимизацией. Загрузка целой библиотеки для работы с датой/временем может сделать валидацию в 10 раз медленней чем ваше решение на коленках, но проверьте свой код, на самом ли деле он так хорош.\r\n\r\nМы программисты гордимся нашими навыками, и нам нравится процесс создания кода. Это нормально. Просто помните, что ваша обязанность в качестве программиста не просто писать код, а решать задачи, и зачастую лучший способ решить проблему заключается в том, чтобы написать как можно меньше кода, насколько это возможно.\r\n\r\nПримечание переводчика: \r\nКстати, последний абзац очень гармонично перекликается с основной идеей из статьи «Как улучшить свой стиль программирования?».\r\nUPD1. Список инструментов по основным языкам программирования, разбитых по категориям: awesome-awesomeness (ссылка предоставлена hell0w0rd в комментариях, ему отдельное спасибо).	1	118
2014-08-05 10:45:44	2014-08-05 14:36:01	Межпланетная станция Rosetta измерила температуру поверхности кометы Чурюмова-Герасименко	До планового сближения станции Rosetta с кометой Чурюмова-Герасименко осталось всего 2 дня (это событие должно произойти 6 августа). Тем не менее, многие замеры разных характеристик кометы, включая размеры ядра, скорость испарения воды уже     сделаны.	До планового сближения станции Rosetta с кометой Чурюмова-Герасименко осталось всего 2 дня (это событие должно произойти 6 августа). Тем не менее, многие замеры разных характеристик кометы, включая размеры ядра, скорость испарения воды уже сделаны. \r\n\r\nТеперь измерена и температура ядра кометы. Забегая наперед, стоит упомянуть, что ядро кометы покрыто темной пылью, которая приводит к увеличению температуры. Это, в свою очередь, означает, что не все ядро кометы покрыто льдом, в некоторых частях ядра температура слишком высока для образования корки льда на поверхности.\r\n\r\nЗамеры температуры были проведены инструментом VIRTIS, в период между 13 и 21 июля. Тогда расстояние станции до кометы снизилось с 14000 километров до всего 5000 километров.\r\n\r\nНа таком расстоянии станция «Розетта» видела комету в размере нескольких пикселей. Прибор VIRTIS позволил измерить тепловое излучение кометы, в результате чего обнаружилось, что средняя температура этого космического тела составляет -70 градусов Цельсия. Это примерно на 20-30 градусов теплее, чем нужно для того, чтобы лед полностью покрывал все ядро.\r\n\r\nРезультаты измерений позволили сделать первые выводы о физических свойствах поверхности ядра кометы и его строении. Сейчас ученые предполагают, что ядро кометы укрыто темной пылью, которая и является причиной повышенной температуры ядра. Вскоре при помощи VIRTIS можно будет построить детальную тепловую карту кометы, как текущую, статичную, так и «сезонную», с отображением изменения температуры ядра в зависимости от влияния Солнца. \r\n\r\nСейчас расстояние до кометы лишь немногим больше 100 километров — планируемая дистанция сближения станции Rosetta с кометой.	1	116
\.


--
-- TOC entry 1945 (class 0 OID 0)
-- Dependencies: 169
-- Name: news_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('news_id_seq', 119, true);


--
-- TOC entry 1823 (class 2606 OID 16419)
-- Name: pk_albums_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY albums
    ADD CONSTRAINT pk_albums_id PRIMARY KEY (id);


--
-- TOC entry 1821 (class 2606 OID 16402)
-- Name: pk_news_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY news
    ADD CONSTRAINT pk_news_id PRIMARY KEY (id);


--
-- TOC entry 1940 (class 0 OID 0)
-- Dependencies: 5
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2014-08-14 10:53:50

--
-- PostgreSQL database dump complete
--

